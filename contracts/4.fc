{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

(builder) store_ref_new(builder b, cell c) inline asm(c b) "STREF";
forall X -> (tuple, ()) cons_new(tuple tail, X head) inline asm(head tail) "CONS";

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  slice text = begin_cell().store_ref(text).end_cell().begin_parse();
  shift = shift % 26;

  tuple t_result = empty_tuple();
  builder middle_result = begin_cell();

  int i = text.slice_depth();
  int new_char = 0;
  int char = 0;
  repeat(i) {
    text = text.preload_ref().begin_parse();
    middle_result = begin_cell();
    repeat(text.slice_bits() / 8) {
      char = text~load_uint(8);
      if((65 <= char) & (char <= 90)) {
        new_char = ((65 <= char + shift) & (char + shift <= 90)) ? char + shift : char + shift - 26;
      }
      elseif((97 <= char) & (char <= 122)) {
        new_char = ((97 <= char + shift) & (char + shift <= 122)) ? char + shift : char + shift - 26;
      }
      else {
        new_char = char;
      }
      middle_result~store_uint(new_char, 8);
    }
    t_result~cons_new(middle_result);
  }
  
  builder last = t_result~list_next();
  repeat(i - 1) {
    last = t_result~list_next().store_ref_new(last.end_cell());
  }

  return last.end_cell();
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  return caesar_cipher_encrypt(26 - shift, text);
}