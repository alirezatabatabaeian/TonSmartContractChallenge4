{-
  TASK 1 - Find branch of the cell tree
  Write the method that will find a branch of the tree by comparing its
  hash with the hash received in the first parameter. When the algorithm finds
  the subtree (branch) whose hash equals the received hash, the root cell of
  this branch should be returned. Return empty cell if the branch is not found.
-} 

() recv_internal() {
}

;; ;; testable
;; (cell) find_branch_by_hash(int hash, cell tree) method_id {
;;   if(tree.cell_hash() == hash) {
;;     return tree; 
;;   }

;;   slice str = tree.begin_parse();

;;   repeat(str.slice_refs()) {
;;     cell maybe_answer = find_branch_by_hash(hash, str~load_ref());
;;     ifnot(maybe_answer.begin_parse().slice_empty?()) {
;;       return maybe_answer;
;;     }
;;   }

;;   return begin_cell().end_cell();
;; }

;; testable
(cell) find_branch_by_hash(int hash, cell tree) method_id {
  if(tree.cell_hash() == hash) { return tree; }
  slice stree = tree.begin_parse();
  repeat(stree.slice_refs()) {
    cell ref1 = stree~load_ref();
    if(ref1.cell_hash() == hash) { return ref1; }
    slice sref1 = ref1.begin_parse();
    repeat(sref1.slice_refs()) {
      cell ref2 = sref1~load_ref();
      if(ref2.cell_hash() == hash) { return ref2; }
    }
  }

  return begin_cell().end_cell();
}