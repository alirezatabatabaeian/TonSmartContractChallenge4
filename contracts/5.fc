{-
  TASK 5 - Fibonacci sequence 
  Implement a function that generates the Fibonacci
  sequence from N to N+K terms (0<=N<=370; 0<=N+K<=371; 0<=K<=255).
  The first two terms of the Fibonacci sequence are F_0 = 0 and F_1 = 1,
  and the rest are defined as F_n = F_(n-1) + F_(n-2).
  The resulting Fibonacci sequence should be stored in a tuple.
  For example, a request with N = 1 and K = 3 should return a tuple [1, 1, 2],
  and a request with N = 201 and K = 4 should return a tuple
  [453973694165307953197296969697410619233826,
  734544867157818093234908902110449296423351,
  1188518561323126046432205871807859915657177,
  1923063428480944139667114773918309212080528] 
-}

() recv_internal() {
}

int add(int a, int b) inline asm "ADD";

;; testable
(tuple) fibonacci_sequence (int n, int k) method_id {
  tuple final_answer = empty_tuple();
  int before_before = 0;
  int before = 0;

  if(n < 102) {
    if(n == 0) {
      before_before = -1;
      before = 1;
    }
    elseif(n == 1) {
      before_before = 1;
      before = 0;
    }
    elseif(n < 12) {
      before_before = 0;
      before = 1;
    }
    elseif(n < 22) {
      before_before = 55;
      before = 89;
    }
    elseif(n < 32) {
      before_before = 6765;
      before = 10946;
    }
    elseif(n < 42) {
      before_before = 832040;
      before = 1346269;
    }
    elseif(n < 52) {
      before_before = 102334155;
      before = 165580141;
    }
    elseif(n < 62) {
      before_before = 12586269025;
      before = 20365011074;
    }
    elseif(n < 72) {
      before_before = 1548008755920;
      before = 2504730781961;
    }
    elseif(n < 82) {
      before_before = 190392490709135;
      before = 308061521170129;
    }
    elseif(n < 92) {
      before_before = 23416728348467685;
      before = 37889062373143906;
    }
    else {
      before_before = 2880067194370816120;
      before = 4660046610375530309;
    }
  }
  elseif(n < 302) {
    if(n < 112) {
      before_before = 354224848179261915075;
      before = 573147844013817084101;
    }
    elseif(n < 122) {
      before_before = 43566776258854844738105;
      before = 70492524767089125814114;
    }
    elseif(n < 132) {
      before_before = 5358359254990966640871840;
      before = 8670007398507948658051921;
    }
    elseif(n < 142) {
      before_before = 659034621587630041982498215;
      before = 1066340417491710595814572169;
    }
    elseif(n < 152) {
      before_before = 81055900096023504197206408605;
      before = 131151201344081895336534324866;
    }
    elseif(n < 162) {
      before_before = 9969216677189303386214405760200;
      before = 16130531424904581415797907386349;
    }
    elseif(n < 172) {
      before_before = 1226132595394188293000174702095995;
      before = 1983924214061919432247806074196061;
    }
    elseif(n < 182) {
      before_before = 150804340016807970735635273952047185;
      before = 244006547798191185585064349218729154;
    }
    elseif(n < 192) {
      before_before = 18547707689471986212190138521399707760;
      before = 30010821454963453907530667147829489881;
    }
    elseif(n < 202) {
      before_before = 2281217241465037496128651402858212007295;
      before = 3691087032412706639440686994833808526209;
    }
    elseif(n < 212) {
      before_before = 280571172992510140037611932413038677189525;
      before = 453973694165307953197296969697410619233826;
    }
    elseif(n < 222) {
      before_before = 34507973060837282187130139035400899082304280;
      before = 55835073295300465536628086585786672357234389;
    }
    elseif(n < 232) {
      before_before = 4244200115309993198876969489421897548446236915;
      before = 6867260041627791953052057353082063289320596021;
    }
    elseif(n < 242) {
      before_before = 522002106210068326179680117059857997559804836265;
      before = 844617150046923109759866426342507997914076076194;
    }
    elseif(n < 252) {
      before_before = 64202014863723094126901777428873111802307548623680;
      before = 103881042195729914708510518382775401680142036775841;
    }
    elseif(n < 262) {
      before_before = 7896325826131730509282738943634332893686268675876375;
      before = 12776523572924732586037033894655031898659556447352249;
    }
    elseif(n < 272) {
      before_before = 971183874599339129547649988289594072811608739584170445;
      before = 1571408518427546378167846658524186148133445300987550786;
    }
    elseif(n < 282) {
      before_before = 119447720249892581203851665820676436622934188700177088360;
      before = 193270471243015279782059101964580241188515112465021394429;
    }
    elseif(n < 292) {
      before_before = 14691098406862188148944207245954912110548093601382197697835;
      before = 23770696554372451866815101694984845480039225387896643963981;
    }
    else {
      before_before = 1806885656323799249738933639586633513160792578781310139745345;
      before = 2923602405716568564338475449381171413803636207598822186175234;
    }
  }
  else {
    if(n < 312) {
      before_before = 222232244629420445529739893461909967206666939096499764990979600;
      before = 359579325206583560961765665172189099052367214309267232255589801;
    }
    ;; elseif(n < 322) {
    ;;   before_before = 27332759203762391000908267962175339332906872716290689783750745455;
    ;;   before = 44225333398004061429732838340729878012027363723832270745251370289;
    ;; }
    ;; elseif(n < 332) {
    ;;   before_before = 3361707149818144672666187219454104827980338677164658343636350711365;
    ;;   before = 5439356428629292972296177350244602806380313370817060034433662955746;
    ;; }
    ;; elseif(n < 342) {
    ;;   before_before = 413462646668428032346940119724892718502248750418536685577487386752440;
    ;;   before = 668996615388005031531000081241745415306766517246774551964595292186469;
    ;; }
    elseif(n < 352) {
      before_before = 50852543833066829834000968538942350270948615962802847667687312219838755;
      before = 82281144336295989585340713815384441479925901307982452831610787275979941;
    }
    elseif(n < 362) {
      before_before = 6254449428820551641549772190170184190608177514674331726439961915653414425;
      before = 10119911756749018713965376799211044556615579094364594923736162239653346274;
    }
    else {
      before_before = 769246427201094785080787978422393713094534885688979999504447628313150135520;
      before = 1244666864935793005828156005589143096022236302705537193166716344690085611761;
    }
  }

  ifnot((n == 0) | (n == 1)) {
    n = n % 10 - 2;
    if(n < 0) {
      n += 10;
    }
  }
  else {
    n = n % 10 - 2;
  }
  
  repeat(n) {
    (before_before, before) = (before, add(before, before_before));
  }
  repeat(k) {
    (before_before, before) = (before, add(before, before_before));
    final_answer~tpush(before);
  }
  return final_answer;
}